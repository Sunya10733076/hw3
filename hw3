
#Object-Oriented Style:


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def convert_to_linked_list(self, s):
        dummy = ListNode()
        current = dummy
        for digit in reversed(s):
            current.next = ListNode(int(digit, 16))
            current = current.next
        return dummy.next

    def reverse_linked_list(self, head, k):
        prev = None
        curr = head
        count = 0
        while curr and count < k:
            next_node = curr.next
            curr.next = prev
            prev = curr
            curr = next_node
            count += 1
        return prev, head, curr

    def add_lists(self, l1, l2):
        carry = 0
        dummy = ListNode()
        current = dummy
        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            total = val1 + val2 + carry
            carry = total // 16
            current.next = ListNode(total % 16)
            current = current.next
            if l1: l1 = l1.next
            if l2: l2 = l2.next
        return dummy.next

    def add_two_hex_lists(self, l1, l2, R):
        l1 = self.convert_to_linked_list(l1)
        l2 = self.convert_to_linked_list(l2)
        result = self.add_lists(l1, l2)

        dummy = ListNode()
        dummy.next = result
        prev = dummy
        count = 0
        while result:
            count += 1
            if count == R:
                next_group = result.next
                result.next = None
                reversed_head, new_head, remaining = self.reverse_linked_list(dummy.next, R)
                prev.next = reversed_head
                new_head.next = remaining
                prev = new_head
                result = remaining
                count = 0
            else:
                result = result.next

        output = []
        while dummy.next:
            output.append(format(dummy.next.val, 'X'))
            dummy.next = dummy.next.next

        return output

# Example usage:
l1 = "7,1,A,4"  # Replace with your hexadecimal string
l2 = "9,7,7"    # Replace with your hexadecimal string
R = 3           # Replace with your R-value

node = ListNode()
result = node.add_two_hex_lists(l1.split(','), l2.split(','), R)
print(result)   # Output: ['1', 'B', '7', 'B']
